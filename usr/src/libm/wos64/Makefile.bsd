#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)Makefile	1.38	06/01/31 SMI"
#

# Copyright 2017 John Marino <draco@marino.st> (BSD modifications)
#
# Expected to be defined:
#
# ARCH (i386, amd64, x86_64, sparc64)
# BSD_INSTALL_DATA    (install non-executables)
# BSD_INSTALL_LIB     (install libraries)
# DESTDIR
# PREFIX
#
# To use assembly versions of functions, define
# USE_ASSEMBLY_VERSIONS
#
# Can be redefined:
# AR
# RANLIB
# CPP_CMD
# LD
# LN
# TR
# MKDIR
# CAT
# SED
# RM
# TSORT

ARCH	?= ${MACHINE_ARCH}

MCPU:sh  = \
	case "${ARCH}" in \
	sparc*) echo sparc ;; \
	i386|amd64|x86_64) echo i386 ;; \
	*) echo unknown_arch ;; \
	esac

SUNW_ISA:sh  = \
	case "${ARCH}" in \
	sparc*) echo sparcv9 ;; \
	i386|amd64|x86_64) echo amd64 ;; \
	*) echo unknown_arch ;; \
	esac

DESTDIR		= destdir-$(SUNW_ISA)

CG_sparc	= v9
CG_i386		= amd64
CG		= $(CG_$(MCPU))
CHIP_sparc	= ultra
CHIP_i386	= amd64
CHIP		= $(CHIP_$(MCPU))

VnA		= sparcv9+vis
VnB		= sparcv9+vis2
ISA_DIRS_sparc	= $(VnA) $(VnB)
ISA_DIRS_i386	=
ISA_DIRS	= $(ISA_DIRS_$(MCPU))

DESTINO_LIB	= ${DESTDIR}${PREFIX}/lib/opensolaris
DESTINO_INCS	= ${DESTDIR}${PREFIX}/include/opensolaris-libm
DESTINO_DOCS	= ${DESTDIR}${PREFIX}/share/opensolaris-libm

#
# system commands
#

AR		?= /usr/bin/ar
CPP_CMD		?= /usr/bin/cpp
INSTALL		?= /usr/bin/install
LD		?= /usr/bin/ld
TR		?= /usr/bin/tr
MKDIR		?= /bin/mkdir -p
CAT		?= /bin/cat
SED		?= /usr/bin/sed
RM		?= /bin/rm -f
LN		?= /bin/ln
TSORT		?= /usr/bin/tsort
RANLIB		?= /usr/bin/ranlib

#
# compiler-related symbols and flags
#

FPDEF_sparc	= -D__$(SUNW_ISA) -DARCH_$(CG)
FPDEF_i386	= -D__$(SUNW_ISA) -DARCH_$(CG)
FPDEF		= $(FPDEF_$(MCPU))

#
# above and beyond what CDEF defines
#
ASDEF		= -D_ASM $(FPDEF)

ASSUFFIX_sparc	= S
ASSUFFIX_i386	= s
ASSUFFIX	= $(ASSUFFIX_$(MCPU))

CDEF_sparc	=
CDEF_i386	= -D__i386 ###-DAMD64_BRINGUP_WORKAROUND
CDEF		= -DPIC -D_STDC_C99= -D_REENTRANT \
		$(CDEF_$(MCPU))

CINC		= -I../inc -I$(SRC)/C

#
# __INLINE turns on the use of __inline_sqrt in sqrt.c
#
OLVL_sparc	= -xO4
OLVL_i386	= -O
COPT_sparc	= -D__INLINE -xregs=no%appl -xchip=ultra3
COPT_i386	= -D__INLINE
COPT		= $(OLVL_$(MCPU)) $(COPT_$(MCPU))

#
# $(LDEND) must come *last* when link editing with versioning; otherwise
# _lib_version, isnan, logb, nextafter, scalb will disappear from version
# information due to the fact that they are also part of libc
#
MAPFMV1		= mapfiles/libmv1-common
MAPFMV2		= mapfiles/libmv2-$(MCPU)
MAPFMVEC	= mapfiles/libmvec-common
MAPFMVECA	= mapfiles/libmvec-v9a
MAPFMVECB	= mapfiles/libmvec-v9b
MAPFILES_sparc	= $(MAPFMV1) $(MAPFMV2) $(MAPFMVEC) $(MAPFMVECA) $(MAPFMVECB)
MAPFILES_i386	= $(MAPFMV2) $(MAPFMVEC)
MAPFILES	= $(MAPFILES_$(MCPU))
LDOPT0		= -z redlocsym
LDOPT		= -dy -G $(LDOPT0) -z combreloc -z text -z defs -h $(@F) \
			-YP,/lib/$(SUNW_ISA)
LDEND		= -lc

APPFLAGS	= $(ASDEF) -Wp,-P
ASFLAGS		=
CFLAGS		+= $(COPT) -Wall -g
CPPFLAGS	= $(CDEF) $(CINC)

#
# Directories
#
MDIR		= $(MCPU)
ROOTLIB		= $(DESTDIR)/lib
SRC		= ../src

LDBLDIR_sparc	= Q
LDBLDIR_i386	= LD
LDBLDIR		= $(LDBLDIR_$(MCPU))

#
# Symbols and flags
#

LLIB_LM		= llib-lm.ln
M_LN		= $(LLIB_LM:%=$(CG)/misc/%)

COBJS_sparc	= \
		_TBL_atan.o \
		_TBL_exp2.o \
		_TBL_log.o \
		_TBL_log2.o \
		#end

COBJS_i386	= $(COBJS_sparc)

#
# atan2pi.o and sincospi.o is for internal use only
#
COBJS		= \
		fp_class.o \
		$(COBJS_$(MCPU)) \
		__cos.o \
		__lgamma.o \
		__rem_pio2.o \
		__rem_pio2m.o \
		__sin.o \
		__sincos.o \
		__tan.o \
		__tanf.o \
		__xpg6.o \
		_lib_version.o \
		_SVID_error.o \
		_TBL_ipio2.o \
		_TBL_sin.o \
		_TBL_tan.o \
		acos.o \
		acosh.o \
		asin.o \
		asinh.o \
		atan.o \
		atan2.o \
		atan2pi.o \
		atanh.o \
		cbrt.o \
		ceil.o \
		copysign.o \
		cos.o \
		cosh.o \
		erf.o \
		exp.o \
		exp10.o \
		exp2.o \
		expm1.o \
		fabs.o \
		floor.o \
		fmod.o \
		gamma.o \
		gamma_r.o \
		hypot.o \
		ilogb.o \
		isnan.o \
		j0.o \
		j1.o \
		jn.o \
		lgamma.o \
		lgamma_r.o \
		log.o \
		log10.o \
		log1p.o \
		log2.o \
		logb.o \
		matherr.o \
		nextafter.o \
		pow.o \
		remainder.o \
		rint.o \
		scalb.o \
		scalbn.o \
		signgam.o \
		significand.o \
		sin.o \
		sincos.o \
		sincospi.o \
		sinh.o \
		sqrt.o \
		tan.o \
		tanh.o \
		#end

#
# LSARC/2003/658 adds isnanl
#
QOBJS_sparc	= \
		_TBL_atanl.o \
		_TBL_expl.o \
		_TBL_expm1l.o \
		_TBL_logl.o \
		finitel.o \
		isnanl.o \
		#end

QOBJS_i386	= \
		finitel.o \
		isnanl.o \
		#end

#
# atan2pil.o, ieee_funcl.o, rndintl.o, sinpil.o, sincosl.o, sincospil.o
# are for internal use only
#
# LSARC/2003/279 adds the following:
#		gammal.o	1
#		gammal_r.o	1
#		j0l.o		2
#		j1l.o		2
#		jnl.o		2
#		lgammal_r.o	1
#		scalbl.o	1
#		significandl.o	1
#
QOBJS		= \
		$(QOBJS_$(MCPU)) \
		__cosl.o \
		__lgammal.o \
		__poly_libmq.o \
		__rem_pio2l.o \
		__sincosl.o \
		__sinl.o \
		__tanl.o \
		_TBL_cosl.o \
		_TBL_ipio2l.o \
		_TBL_sinl.o \
		_TBL_tanl.o \
		acoshl.o \
		acosl.o \
		asinhl.o \
		asinl.o \
		atan2l.o \
		atan2pil.o \
		atanhl.o \
		atanl.o \
		cbrtl.o \
		copysignl.o \
		coshl.o \
		cosl.o \
		erfl.o \
		exp10l.o \
		exp2l.o \
		expl.o \
		expm1l.o \
		fabsl.o \
		floorl.o \
		fmodl.o \
		gammal.o \
		gammal_r.o \
		hypotl.o \
		ieee_funcl.o \
		ilogbl.o \
		j0l.o \
		j1l.o \
		jnl.o \
		lgammal.o \
		lgammal_r.o \
		log10l.o \
		log1pl.o \
		log2l.o \
		logbl.o \
		logl.o \
		nextafterl.o \
		powl.o \
		remainderl.o \
		rintl.o \
		rndintl.o \
		scalbl.o \
		scalbnl.o \
		signgaml.o \
		significandl.o \
		sincosl.o \
		sincospil.o \
		sinhl.o \
		sinl.o \
		sinpil.o \
		sqrtl.o \
		tanhl.o \
		tanl.o \
		#end

#
# LSARC/2003/658 adds isnanf
#
ROBJS_sparc	= \
		isnanf.o \
		#end

ROBJS_i386	= $(ROBJS_sparc)

#
# atan2pif.o, sincosf.o, sincospif.o are for internal use only
#
# LSARC/2003/279 adds the following:
#		besself.o	6
#		scalbf.o	1
#		gammaf.o	1
#		gammaf_r.o	1
#		lgammaf_r.o	1
#		significandf.o	1
#
ROBJS		= \
		$(ROBJS_$(MCPU)) \
		_TBL_r_atan_.o \
		__cosf.o \
		__sincosf.o \
		__sinf.o \
		acosf.o \
		acoshf.o \
		asinf.o \
		asinhf.o \
		atan2f.o \
		atan2pif.o \
		atanf.o \
		atanhf.o \
		besself.o \
		cbrtf.o \
		copysignf.o \
		cosf.o \
		coshf.o \
		erff.o \
		exp10f.o \
		exp2f.o \
		expf.o \
		expm1f.o \
		fabsf.o \
		floorf.o \
		fmodf.o \
		gammaf.o \
		gammaf_r.o \
		hypotf.o \
		ilogbf.o \
		lgammaf.o \
		lgammaf_r.o \
		log10f.o \
		log1pf.o \
		log2f.o \
		logbf.o \
		logf.o \
		nextafterf.o \
		powf.o \
		remainderf.o \
		rintf.o \
		scalbf.o \
		scalbnf.o \
		signgamf.o \
		significandf.o \
		sinf.o \
		sinhf.o \
		sincosf.o \
		sincospif.o \
		sqrtf.o \
		tanf.o \
		tanhf.o \
		#end

SOBJS_sparc	= \
		#end

SOBJS_i386	= \
		__swapFLAGS.o \
#		_xtoll.o \
#		_xtoull.o \
		#end

SOBJS		= \
		$(SOBJS_$(MCPU)) \
		#end

m9xOBJS_amd64	= \
		__fex_sse.o \
		feprec.o \
		#end

m9xOBJS_sparcv9	= \
		#end

#
# lrint.o, lrintf.o, lrintl.o, lround.o, lroundf.o & lroundl.o are 32-bit only
#
# suppress __fex_sym.o
m9xOBJS		= \
		$(m9xOBJS_$(SUNW_ISA)) \
		__fex_$(MCPU).o \
		__fex_hdlr.o \
		fdim.o \
		fdimf.o \
		fdiml.o \
		feexcept.o \
		fenv.o \
		feround.o \
		fex_handler.o \
		fex_log.o \
		fma.o \
		fmaf.o \
		fmal.o \
		fmax.o \
		fmaxf.o \
		fmaxl.o \
		fmin.o \
		fminf.o \
		fminl.o \
		frexp.o \
		frexpf.o \
		frexpl.o \
		ldexp.o \
		ldexpf.o \
		ldexpl.o \
		llrint.o \
		llrintf.o \
		llrintl.o \
		llround.o \
		llroundf.o \
		llroundl.o \
		modf.o \
		modff.o \
		modfl.o \
		nan.o \
		nanf.o \
		nanl.o \
		nearbyint.o \
		nearbyintf.o \
		nearbyintl.o \
		nexttoward.o \
		nexttowardf.o \
		nexttowardl.o \
		remquo.o \
		remquof.o \
		remquol.o \
		round.o \
		roundf.o \
		roundl.o \
		scalbln.o \
		scalblnf.o \
		scalblnl.o \
		tgamma.o \
		tgammaf.o \
		tgammal.o \
		trunc.o \
		truncf.o \
		truncl.o \
		#end

complexOBJS	= \
		cabs.o \
		cabsf.o \
		cabsl.o \
		cacos.o \
		cacosf.o \
		cacosh.o \
		cacoshf.o \
		cacoshl.o \
		cacosl.o \
		carg.o \
		cargf.o \
		cargl.o \
		casin.o \
		casinf.o \
		casinh.o \
		casinhf.o \
		casinhl.o \
		casinl.o \
		catan.o \
		catanf.o \
		catanh.o \
		catanhf.o \
		catanhl.o \
		catanl.o \
		ccos.o \
		ccosf.o \
		ccosh.o \
		ccoshf.o \
		ccoshl.o \
		ccosl.o \
		cexp.o \
		cexpf.o \
		cexpl.o \
		cimag.o \
		cimagf.o \
		cimagl.o \
		clog.o \
		clogf.o \
		clogl.o \
		conj.o \
		conjf.o \
		conjl.o \
		cpow.o \
		cpowf.o \
		cpowl.o \
		cproj.o \
		cprojf.o \
		cprojl.o \
		creal.o \
		crealf.o \
		creall.o \
		csin.o \
		csinf.o \
		csinh.o \
		csinhf.o \
		csinhl.o \
		csinl.o \
		csqrt.o \
		csqrtf.o \
		csqrtl.o \
		ctan.o \
		ctanf.o \
		ctanh.o \
		ctanhf.o \
		ctanhl.o \
		ctanl.o \
		k_atan2.o \
		k_atan2l.o \
		k_cexp.o \
		k_cexpl.o \
		k_clog_r.o \
		k_clog_rl.o \
		#end

# amd64 specific (sparc has C alternatives for these)
.if defined(USE_ASSEMBLY_VERSIONS)
NO_C_ALTERNATIVES=
.else
NO_C_ALTERNATIVES= \
		acosl.o \
		asinl.o \
		atan2l.o \
		atanl.o \
		copysignl.o \
		exp10l.o \
		exp2l.o \
		expl.o \
		expm1l.o \
		fabsl.o \
		floorl.o \
		fmodl.o \
		ieee_funcl.o \
		ilogbl.o \
		log10l.o \
		log2l.o \
		logl.o \
		powl.o \
		remainderl.o \
		remquol.o \
		rintl.o \
		rndintl.o \
		scalbnl.o \
		sqrtl.o \
		__swapFLAGS.o \
		#end
.endif

.for candidate in  $(COBJS) $(ROBJS) $(QOBJS) $(SOBJS) $(complexOBJS) $(m9xOBJS)
. if !${NO_C_ALTERNATIVES:M${candidate}}
LIBM_SO_OBJS+=	${candidate}
. endif
.endfor

.undef (mvecSOBJS)
.undef (mvecaSOBJS)
.undef (mvecbSOBJS)
.undef (mvecCOBJS_PLUS)
.undef (mvecaCOBJS_PLUS)
.undef (mvecbCOBJS_PLUS)

mvecCOBJS	= \
		__vTBL_atan1.o \
		__vTBL_atan2.o \
		__vTBL_rsqrt.o \
		__vTBL_sincos.o \
		__vTBL_sincos2.o \
		__vTBL_sqrtf.o \
		__vatan.o \
		__vatan2.o \
		__vatan2f.o \
		__vatanf.o \
		__vc_abs.o \
		__vc_exp.o \
		__vc_log.o \
		__vc_pow.o \
		__vcos.o \
		__vcosbig.o \
		__vcosbigf.o \
		__vcosf.o \
		__vexp.o \
		__vexpf.o \
		__vhypot.o \
		__vhypotf.o \
		__vlog.o \
		__vlogf.o \
		__vpow.o \
		__vpowf.o \
		__vrem_pio2m.o \
		__vrhypot.o \
		__vrhypotf.o \
		__vrsqrt.o \
		__vrsqrtf.o \
		__vsin.o \
		__vsinbig.o \
		__vsinbigf.o \
		__vsincos.o \
		__vsincosbig.o \
		__vsincosbigf.o \
		__vsincosf.o \
		__vsinf.o \
		__vsqrt.o \
		__vz_abs.o \
		__vz_exp.o \
		__vz_log.o \
		__vz_pow.o \
		vatan2_.o \
		vatan2f_.o \
		vatan_.o \
		vatanf_.o \
		vc_abs_.o \
		vc_exp_.o \
		vc_log_.o \
		vc_pow_.o \
		vcos_.o \
		vcosf_.o \
		vexp_.o \
		vexpf_.o \
		vhypot_.o \
		vhypotf_.o \
		vlog_.o \
		vlogf_.o \
		vpow_.o \
		vpowf_.o \
		vrhypot_.o \
		vrhypotf_.o \
		vrsqrt_.o \
		vrsqrtf_.o \
		vsin_.o \
		vsincos_.o \
		vsincosf_.o \
		vsinf_.o \
		vsqrt_.o \
		vsqrtf_.o \
		vz_abs_.o \
		vz_exp_.o \
		vz_log_.o \
		vz_pow_.o \
		$(mvecCOBJS_PLUS) \
		#end

mvecaCOBJS	= \
		__vTBL_atan1.o \
		__vTBL_atan2.o \
		__vTBL_rsqrt.o \
		__vTBL_sincos.o \
		__vTBL_sincos2.o \
		__vTBL_sqrtf.o \
		__vcosbig.o \
		__vcosbigf.o \
		__vrem_pio2m.o \
		__vsinbig.o \
		__vsinbigf.o \
		__vsincosbig.o \
		__vsincosbigf.o \
		$(mvecaCOBJS_PLUS) \
		#end

mveca_assembly	= \
		__vatan.o \
		__vatan2.o \
		__vatan2f.o \
		__vatanf.o \
		__vcos.o \
		__vcosf.o \
		__vexp.o \
		__vexpf.o \
		__vhypot.o \
		__vhypotf.o \
		__vlog.o \
		__vlogf.o \
		__vpow.o \
		__vpowf.o \
		__vrhypot.o \
		__vrhypotf.o \
		__vrsqrt.o \
		__vrsqrtf.o \
		__vsin.o \
		__vsincos.o \
		__vsincosf.o \
		__vsinf.o \
		__vsqrt.o \
		__vsqrtf.o \
		#end

mvecbCOBJS	= \
		__vTBL_sincos.o \
		__vTBL_sincos2.o \
		__vTBL_sqrtf.o \
		__vcosbig.o \
		__vcosbig_ultra3.o \
		__vrem_pio2m.o \
		__vsinbig.o \
		__vsinbig_ultra3.o \
		$(mvecbCOBJS_PLUS) \
		#end

mvecb_assembly	= \
		__vcos_ultra3.o \
		__vlog_ultra3.o \
		__vsin_ultra3.o \
		__vsqrtf_ultra3.o \
		#end
		
.if defined(USE_ASSEMBLY_VERSIONS)
.  if ${SUNW_ISA:Mamd64}
mvecSOBJS	= __vsqrtf.o
.  endif
.  if ${SUNW_ISA:Msparcv9}
mvecCOBJS_PLUS	= __vsqrtf.o
.  endif
mvecaSOBJS      = $(mveca_assembly)
mvecbSOBJS      = $(mvecb_assembly)
.else
mvecCOBJS_PLUS	= __vsqrtf.o
mvecaCOBJS_PLUS	= $(mveca_assembly)
mvecbCOBJS_PLUS	= $(mvecb_assembly)
.endif

LIBMVEC_SO_OBJS		= $(mvecCOBJS) $(mvecSOBJS)
LIBMVEC_VnA_OBJS	= $(mvecaCOBJS) $(mvecaSOBJS)
LIBMVEC_VnB_OBJS	= $(mvecbCOBJS) $(mvecbSOBJS)

#
# Header files under $(SRC)
#

CHDR		= \
		libm.h \
		libm_inlines.h \
		libm_macros.h \
		libm_protos.h \
		libm_thread.h \
		xpg6.h \
		#end

QHDR		= longdouble.h

LDHDR		= longdouble.h

complexHDR	= complex_wrapper.h

m9xHDR		= \
		fenv_inlines.h \
		fex_handler.h \
		fma.h \
		#end

C_HDR		= $(CHDR:%=$(SRC)/C/%)
Q_HDR		= $(QHDR:%=$(SRC)/$(LDBLDIR)/%)
complex_HDR	= $(complexHDR:%=$(SRC)/complex/%)
m9x_HDR		= $(m9xHDR:%=$(SRC)/m9x/%)
HDRS		= $(C_HDR) $(Q_HDR) $(complex_HDR) $(m9x_HDR)

#
# Header files above and beyond
#

_BSD_HEADERS	= \
		sys/isa_defs.h \
		sys/asm_linkage.h \
		#end

_OSOL_HEADERS	= \
		complex.h \
		fenv.h \
		floatingpoint.h \
		iso/math_c99.h \
		iso/math_iso.h \
		math.h \
		sys/ieeefp.h \
		tgmath.h \
		#end

_HEADERS	= ${_BSD_HEADERS} ${_OSOL_HEADERS}

HEADERS		= $(_HEADERS:%=../inc/%)

#
# Objects
#
LIBM_S		= $(CG)/libm.so.2
LIBM_static	= $(CG)/libm.a

LIBMVEC_S	= $(CG)/libmvec.so.1
LIBMVEC_static	= $(CG)/libmvec.a
LIBMVEC_VnA	= $(VnA)/libmvec_isa.so.1
LIBMVEC_VnB	= $(VnB)/libmvec_isa.so.1
LIBMVECS_sparc	= $(LIBMVEC_S) $(LIBMVEC_VnA) $(LIBMVEC_VnB)
LIBMVECS_i386	= $(LIBMVEC_S)
LIBMVECS	= $(LIBMVECS_$(MCPU))

OBJS_LIBM_SO	= $(LIBM_SO_OBJS:%=$(CG)/mobj_s/%)

OBJS_LIBMVEC_SO		= $(LIBMVEC_SO_OBJS:%=$(CG)/mvobj_s/%)
OBJS_LIBMVEC_VnA	= $(LIBMVEC_VnA_OBJS:%=$(VnA)/mvobj_s/%)
OBJS_LIBMVEC_VnB	= $(LIBMVEC_VnB_OBJS:%=$(VnB)/mvobj_s/%)

OBJS_LIB	= \
		$(LIBM_SO_OBJS:%=$(CG)/mobj_s/%) \
		$(LIBMVEC_SO_OBJS:%=$(CG)/mvobj_s/%) \
		$(LIBMVEC_VnA_OBJS:%=$(VnA)/mvobj_s/%) \
		$(LIBMVEC_VnB_OBJS:%=$(VnB)/mvobj_s/%) \
		#end

CTRAPS_sparc	= \
		-DFPADD_TRAPS_INCOMPLETE_ON_NAN \
		-DFDTOS_TRAPS_INCOMPLETE_IN_FNS_MODE \
		#end
#
# __vatan.c, __vatan2.c, __vpow.c ,__vexp.c reference fabs;
# we need acomp to treat fabs as an intrinsic.
#
MVECC_i386		= -Dfabs=__fabs
MVECC_sparc		= -W0,-xintrinsic $(CTRAPS_sparc)
MVECC_FLAGS		= $(MVECC_$(MCPU)) -DLIBMVEC_SO_BUILD

MLIBC_i386		=
MLIBC_sparc		= $(CTRAPS_sparc) -dalign
MLIBC_FLAGS		= $(MLIBC_$(MCPU)) -DLIBM_BUILD -Wno-unknown-pragmas -I$(SRC)/LD

#$(VnA)/mv%.o		:= CHIP		= vis
#$(VnA)/mv%.o		:= CDEF		+= -DLIBMVEC_SO_BUILD
#$(VnB)/mv%.o		:= CHIP		= vis
#$(VnB)/mv%.o		:= CDEF		+= -DLIBMVEC_SO_BUILD

# seems to be obsolete %/exp10.o %/exp2.o	:= CDEF_i386	+= -D__anint=__round

#
# AMD64 bringup workarounds
#

CG_DIRS_sparc	= mobj_p mobj_s mvobj_s misc
CG_DIRS_i386	= $(CG_DIRS_sparc)
CG_DIRS		= $(CG_DIRS_$(MCPU))

DIRS_CG		= \
		$(CG_DIRS:%=$(CG)/%) \
		$(ISA_DIRS:%=%/mvobj_s) \
		#end

#
# libm build rules
#

all: $(LIBMVEC_static) $(LIBMVEC_S) $(LIBM_static) $(LIBM_S)

install:
	${MKDIR} ${DESTINO_LIB} ${DESTINO_INCS}/sys ${DESTINO_INCS}/iso
	#${MKDIR} ${DESTINO_DOCS}
	${BSD_INSTALL_LIB} $(LIBMVEC_S) ${DESTINO_LIB}/$(LIBMVEC_S:T)
	${BSD_INSTALL_DATA} $(LIBMVEC_static) ${DESTINO_LIB}/$(LIBMVEC_static:T)
	${LN} -sf $(LIBMVEC_S:T) ${DESTINO_LIB}/$(LIBMVEC_S:T:R)
	${BSD_INSTALL_LIB} $(LIBM_S) ${DESTINO_LIB}/$(LIBM_S:T)
	${BSD_INSTALL_DATA} $(LIBM_static) ${DESTINO_LIB}/$(LIBM_static:T)
	${LN} -sf $(LIBM_S:T) ${DESTINO_LIB}/$(LIBM_S:T:R)
.for OH in ${_OSOL_HEADERS} sys/feature_tests.h
	${BSD_INSTALL_DATA} ../inc/${OH} ${DESTINO_INCS}/${OH}
.endfor

clean:
	-$(RM) -r $(CG)/mobj_p $(CG)/mobj_s $(CG)/mvobj_s \
	 $(ISA_DIRS:%=%/mvobj_s) $(LM_IL)

$(LIBM_static): $(OBJS_LIBM_SO)
	@echo Building static library: ${.TARGET:T}
	${RM} ${.TARGET}
	${AR} cq ${.TARGET} `lorder $(OBJS_LIBM_SO) | ${TSORT} -q`
	${RANLIB} ${.TARGET}
	
$(LIBM_S): $(MAPFMV2) $$(OBJS_LIBM_SO:.o=.So)
	@echo Building shared library: ${.TARGET:T}
	${RM} ${.TARGET}
	${CC} ${LDFLAGS} -Wl,--version-script=${MAPFMV2} -shared -Wl,-x \
		-o ${.TARGET} -Wl,-soname,${LIBM_S:T} \
		`lorder $(OBJS_LIBM_SO:.o=.So) | ${TSORT} -q`

$(LIBMVEC_static): $(OBJS_LIBMVEC_SO)
	@echo Building static library: ${.TARGET:T}
	${RM} ${.TARGET}
	${AR} cq ${.TARGET} `lorder $(OBJS_LIBMVEC_SO) | ${TSORT} -q`
	${RANLIB} ${.TARGET}

$(LIBMVEC_S): $(MAPFMVEC) $(OBJS_LIBMVEC_SO:.o=.So)
	@echo Building shared library: ${.TARGET:T}
	${RM} ${.TARGET}
	${CC} ${LDFLAGS} -Wl,--version-script=${MAPFMVEC} -shared -Wl,-x \
		-o ${.TARGET} -Wl,-soname,${LIBMVEC_S:T} \
		`lorder $(OBJS_LIBMVEC_SO:.o=.So) | ${TSORT} -q`

# Todo: sparc support (maybe)
#$(LIBMVEC_VnA): $(MAPFMVECA) $$(OBJS_LIBMVEC_VnA)
#$(LIBMVEC_VnB): $(MAPFMVECB) $$(OBJS_LIBMVEC_VnB)

# mvec C objects, static and shared versions
.for SF in ${mvecCOBJS}
$(CG)/mvobj_s/${SF}: ${SRC}/mvec/${SF:.o=.c} $(CG)/mvobj_s $(HEADERS)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(MVECC_FLAGS) -c ${SRC}/mvec/${SF:.o=.c} -o ${.TARGET}
$(CG)/mvobj_s/${SF:.o=.So}: ${SRC}/mvec/${SF:.o=.c} $(CG)/mvobj_s $(HEADERS)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(MVECC_FLAGS) -fpic -DPIC -c ${SRC}/mvec/${SF:.o=.c} -o ${.TARGET}
.endfor

# mvec assembly objects
.for SF in ${mvecSOBJS}
amd64/mvobj_s/${SF}: ${SRC}/mvec/amd64/${SF:.o=.S} $(CG)/mvobj_s $(HEADERS)
	$(CC) -x assembler-with-cpp $(CFLAGS) $(CPPFLAGS) $(APPFLAGS) \
		${MVECC_FLAGS} -c ${SRC}/mvec/amd64/${SF:.o=.S} -o ${.TARGET}
amd64/mvobj_s/${SF:.o=.So}: ${SRC}/mvec/amd64/${SF:.o=.S} $(CG)/mvobj_s $(HEADERS)
	$(CC) -x assembler-with-cpp $(CFLAGS) $(CPPFLAGS) $(APPFLAGS) \
		${MVECC_FLAGS} -fpic -DPIC -c ${SRC}/mvec/amd64/${SF:.o=.S} -o ${.TARGET}
.endfor

# All libm objects (dynamically create target based on path and assembly setting
# The paths are hardcoded for amd64, may have to be redone if sparc needs supporting
# Note that ../src/i386/common only compile with -m32, so the C variants of
# those functions must be used on x6_64
.PATH.s:	../src/i386/amd64
.PATH.c:	../src/C
.PATH.c:	../src/${LDBLDIR}
.PATH.c:	../src/R
.PATH.c:	../src/m9x
.PATH.c:	../src/complex

.for SF in ${LIBM_SO_OBJS}
. if defined(USE_ASSEMBLY_VERSIONS) && exists(${.CURDIR}/../src/i386/amd64/${SF:.o=.s})
amd64/mobj_s/${SF}: ${SRC}/i386/amd64/${SF:.o=.s} amd64/mobj_s $(C_HDR)
	$(CC) -x assembler-with-cpp $(CPPFLAGS) $(APPFLAGS) \
		${MLIBC_FLAGS} -c ${.ALLSRC:M*.s} -o ${.TARGET}
amd64/mobj_s/${SF:.o=.So}: ${SRC}/i386/amd64/${SF:.o=.s} amd64/mobj_s $(C_HDR)
	$(CC) -x assembler-with-cpp $(CPPFLAGS) $(APPFLAGS) \
		${MLIBC_FLAGS} -fpic -DPIC -c ${.ALLSRC:M*.s} -o ${.TARGET}
. else
amd64/mobj_s/${SF}: ${SF:.o=.c} amd64/mobj_s $(C_HDR)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(MLIBC_FLAGS) -c ${.ALLSRC:M*.c} -o ${.TARGET}
amd64/mobj_s/${SF:.o=.So}: ${SF:.o=.c} amd64/mobj_s $(C_HDR)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(MLIBC_FLAGS) -fpic -DPIC -c ${.ALLSRC:M*.c} -o ${.TARGET}
. endif
.endfor

$(DIRS_CG):
	${MKDIR} ${.TARGET}
